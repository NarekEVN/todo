{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","addList","listName","current","value","task","name","tasks","state","list","push","setState","console","log","alert","addTask","e","ReactDOM","findDOMNode","querySelector","checked","done","taskId","listId","delList","splice","React","createRef","className","type","ref","this","placeholder","onClick","map","elem","index","data-id","key","target","parentNode","getAttribute","taskIndex","data-task","onChange","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OA8FeA,G,kBAzFb,aAAc,IAAD,8BACX,+CAOFC,QAAU,WACR,GAAoC,KAAhC,EAAKC,SAASC,QAAQC,MAAa,CACrC,IAAIC,EAAO,CAACC,KAAM,EAAKJ,SAASC,QAAQC,MAAOG,MAAO,IACtD,EAAKC,MAAMC,KAAKC,KAAKL,GACrB,EAAKM,SAAS,CAACF,KAAM,EAAKD,MAAMC,OAChC,EAAKP,SAASC,QAAQC,MAAQ,GAC9BQ,QAAQC,IAAI,EAAKL,MAAMC,WAIxBK,MAAM,UAlBI,EAsBbC,QAAU,SAACC,GACTJ,QAAQC,IAAIG,GACsD,KAA9DC,IAASC,YAAT,gBAA2BC,cAAc,QAAQH,GAAGZ,QAEpD,EAAKI,MAAMC,KAAKO,GAAGT,MAAMG,KAAK,CAACJ,KAAMW,IAASC,YAAT,gBAA2BC,cAAc,QAAQH,GAAGZ,MAAOgB,SAAS,IACzGR,QAAQC,IAAI,EAAKL,MAAMC,MACvB,EAAKE,SAAS,CAACF,KAAM,EAAKD,MAAMC,OAChCG,QAAQC,IAAI,EAAKL,MAAMC,MACvBQ,IAASC,YAAT,gBAA2BC,cAAc,QAAQH,GAAGZ,MAAQ,KA9BrD,EAkCbiB,KAAO,SAACC,EAAQC,GACV,EAAKf,MAAMC,KAAKc,GAAQhB,MAAMe,GAAQF,QACxC,EAAKZ,MAAMC,KAAKc,GAAQhB,MAAMe,GAAQF,SAAU,EAGhD,EAAKZ,MAAMC,KAAKc,GAAQhB,MAAMe,GAAQF,SAAU,EAElD,EAAKT,SAAS,CAACF,KAAM,EAAKD,MAAMC,QAzCrB,EA6Cbe,QAAU,SAACD,GACT,EAAKf,MAAMC,KAAKgB,OAAOF,EAAQ,GAC/B,EAAKZ,SAAS,CAACF,KAAM,EAAKD,MAAMC,QA7ChC,EAAKP,SAAWwB,IAAMC,YACtB,EAAKnB,MAAQ,CACXC,KAAM,IAJG,E,sEAkDJ,IAAD,OACN,OACE,yBAAKmB,UAAU,aACb,yCACA,wCACA,2BAAOC,KAAK,OAAOC,IAAKC,KAAK7B,SAAU8B,YAAY,oBACnD,4BAAQC,QAASF,KAAK9B,SAAtB,OACA,wBAAI2B,UAAU,QAEVG,KAAKvB,MAAMC,KAAKyB,KAAI,SAACC,EAAMC,GACzB,OACE,wBAAIR,UAAU,YAAYS,UAASD,EAAOE,IAAKF,GAC7C,4BAAKD,EAAK7B,KAAV,IAAgB,4BAAQ2B,QAAS,SAAAjB,GAAM,EAAKQ,SAASR,EAAEuB,OAAOC,WAAWA,WAAWC,aAAa,cAAjF,gBAChB,2BAAOZ,KAAK,OAAOD,UAAW,OAAOQ,EAAOJ,YAAY,eACxD,4BAAQC,QAAS,SAACjB,GAAO,EAAKD,SAASC,EAAEuB,OAAOC,WAAWC,aAAa,cAAxE,KACA,4BAEIN,EAAK5B,MAAM2B,KAAI,SAAC7B,EAAMqC,GACpB,OACA,wBAAIJ,IAAKI,EAAWC,YAAWD,EAAWd,UAAW,EAAKpB,MAAMC,KAAK2B,GAAO7B,MAAMmC,GAAWtB,QAAU,OAAS,IAC7Gf,EAAKC,KACR,2BAAOuB,KAAK,WAAWe,SAAU,SAAA5B,GAC/B,EAAKK,MAAML,EAAEuB,OAAOC,WAAWC,aAAa,cAAezB,EAAEuB,OAAOC,WAAWA,WAAWA,WAAWC,aAAa,8B,GAzE1Hf,IAAMmB,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNjC,IAASkC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.85fe67b2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.listName = React.createRef();  \n    this.state = {\n      list: [],\n    }\n  }\n\n  addList = () => {\n    if (this.listName.current.value !== ''){\n      let task = {name: this.listName.current.value, tasks: []};\n      this.state.list.push(task);\n      this.setState({list: this.state.list});\n      this.listName.current.value = '';\n      console.log(this.state.list);\n      \n    }\n    else{\n     alert(\"Error\");\n    }\n  }\n\n  addTask = (e) => {\n    console.log(e);\n    if (ReactDOM.findDOMNode(this).querySelector(\".task\"+e).value !== ''){\n        \n        this.state.list[e].tasks.push({name: ReactDOM.findDOMNode(this).querySelector(\".task\"+e).value, checked: false});\n        console.log(this.state.list);\n        this.setState({list: this.state.list});\n        console.log(this.state.list);\n        ReactDOM.findDOMNode(this).querySelector(\".task\"+e).value = '';   \n    }\n  }\n\n  done = (taskId, listId) => {\n    if (this.state.list[listId].tasks[taskId].checked){\n      this.state.list[listId].tasks[taskId].checked = false;\n    }\n    else{\n      this.state.list[listId].tasks[taskId].checked = true;\n    }\n    this.setState({list: this.state.list});\n    \n  }\n\n  delList = (listId) => {\n    this.state.list.splice(listId, 1);\n    this.setState({list: this.state.list})\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <h1>TODO List</h1>\n        <h2>Add List</h2>\n        <input type=\"text\" ref={this.listName} placeholder=\"Input List Name\"/>\n        <button onClick={this.addList}>Add</button>\n        <ol className=\"list\">\n          {\n            this.state.list.map((elem, index) => {\n              return (\n                <li className=\"list_item\" data-id={index} key={index}>\n                  <h4>{elem.name} <button onClick={e =>{ this.delList(+e.target.parentNode.parentNode.getAttribute(\"data-id\"))}}>Delete List</button></h4>\n                  <input type=\"text\" className={\"task\"+index} placeholder=\"Input task\" />\n                  <button onClick={(e) => {this.addTask(+e.target.parentNode.getAttribute('data-id'))}}>+</button>\n                  <ol>\n                    {\n                      elem.tasks.map((task, taskIndex) => {\n                        return (\n                        <li key={taskIndex} data-task={taskIndex} className={this.state.list[index].tasks[taskIndex].checked ? \"done\" : \"\"}>\n                          {task.name}\n                        <input type=\"checkbox\" onChange={e => {\n                          this.done(+e.target.parentNode.getAttribute(\"data-task\"), +e.target.parentNode.parentNode.parentNode.getAttribute(\"data-id\"))}\n                        }/>\n                        </li>\n                        )\n                      })\n                    }\n                  </ol>\n                </li>\n              )\n            })\n          }\n        </ol>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}